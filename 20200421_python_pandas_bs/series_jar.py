# -*- coding: utf-8 -*-
"""
Created on Tue Apr 21 10:19:46 2020

@author: USER
"""

# =============================================================================
# 시리즈 : 리스트, 딕셔너리와 비슷 같은 1차원 배열이지만, 내부 구조가 다르기 때문에 잘 알아둬야함
# 시리즈 기초
# Pandas의 Series는 1차원 배열과 같은 자료 구조
# 파이썬 리스트와 튜플도 1차원 배열과 같은 자료 구조
# Pandas의 Serise는 어떤 면에서는 파이썬의 리스트와 비슷하고
# 어떤 면에서는 파이썬의 딕셔너리와 닮은 자료 구조
# 시리즈를 사용하기에 앞서 판다스라는 모듈에서 직접 시리즈와 데이터프레임을
# 로컬 네임스페이스로 import
# =============================================================================
import pandas
print(pandas.Series)

# 시리즈를 직접 네임스페이스로 import 한 경우에는
# 판다스를 생략하고 바로 Series라고만 적으면 된다

from pandas import Series, DataFrame

kakao = Series([92600, 92400, 92100, 94300, 92300])
print(kakao)
print(type(kakao))

# =============================================================================
# 시리즈 객체는 일차원 배열과 달리 값뿐만 아니라 각 값에 연결된 인덱스 값도 동시에 저장
# 시리즈 객체 생성 시에 인덱스값을 따로 지정하지 않으면
# 기본적으로 시리즈 객체는 0부터 시작하는 정숫값을 사용하여 인덱싱
# =============================================================================
print(kakao[0])
print(kakao[2])
print(kakao[4])


# =============================================================================
# kakao2 라는 시리즈 객체는 인덱스값으로 날짜에 해당하는 문자열을 지정했기 때문에
# 정숫값으로 인덱싱하는 것 대신 날짜를 의미하는 문자열을 사용하여 각 날짜에 대한
# 종가를 바로 얻어올 수 있다.
# =============================================================================
kakao2 = Series([92600, 92400, 92100, 94300, 92300],
                index = ['2016-02-19', '2016-02-18', '2016-02-17',
                         '2016-02-16', '2016-02-15'])
print(kakao2)

print(kakao2['2016-02-19'])
print(kakao2['2016-02-18'])

# =============================================================================
# Series 객체의 index와 values 라는 이름의 속성을 통해 접근할 수 있다.
# =============================================================================
for date in kakao2.index:
    print(date)

for ending_price in kakao2.values:
    print(ending_price)
    
# =============================================================================
# 판다스의 시리즈는
# 인덱싱이 서로 다른 경우에도 알아서 인덱싱이 같은 값들끼리 덧셈 연산 수행 가능
# =============================================================================

# from pandas import Series, DataFrame

mine = Series([10, 20, 30], index = ['naver', 'sk', 'kt'])
friend = Series([40, 50, 60], index = ['kt', 'naver', 'sk'])

merge = mine + friend
print(merge)








